
import { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { useAssociation } from '@/contexts/AssociationContext';
import { supabase } from '@/lib/supabase';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { AddUserToAssociation } from '@/components/admin/AddUserToAssociation';
import { UserRoleManager } from '@/components/admin/UserRoleManager';
import { Input } from '@/components/ui/input';
import { Search, Trash2, Mail, CheckCheck } from 'lucide-react';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { useUserProfile } from '@/hooks/useUserProfile';

interface Member {
  id: string;
  email: string;
  name: string;
  role: string;
  profile_image: string | null;
  created_at: string;
}

const AssociationMembers = () => {
  const [searchParams] = useSearchParams();
  const { currentAssociation } = useAssociation();
  const { profile } = useUserProfile();
  const [members, setMembers] = useState<Member[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const { toast } = useToast();
  const associationIdFromQuery = searchParams.get('associationId');
  
  const isAdmin = profile?.role === 'admin' || profile?.role === 'super_admin';
  const associationId = associationIdFromQuery || currentAssociation?.id;
  
  useEffect(() => {
    if (associationId) {
      fetchMembers();
    }
  }, [associationId]);
  
  const fetchMembers = async () => {
    if (!associationId) return;
    
    setLoading(true);
    try {
      const { data: memberData, error: memberError } = await supabase
        .from('association_members')
        .select('user_id, role')
        .eq('association_id', associationId);
      
      if (memberError) throw memberError;
      
      if (memberData && memberData.length > 0) {
        const userIds = memberData.map(member => member.user_id);
        
        const { data: userData, error: userError } = await supabase
          .from('profiles')
          .select('*')
          .in('id', userIds);
        
        if (userError) throw userError;
        
        if (userData) {
          // Merge user data with member roles
          const mergedData = userData.map(user => {
            const memberInfo = memberData.find(m => m.user_id === user.id);
            return {
              ...user,
              associationRole: memberInfo?.role || 'member'
            };
          });
          
          setMembers(mergedData);
        }
      } else {
        setMembers([]);
      }
    } catch (error) {
      console.error('Error fetching members:', error);
      toast({
        title: 'Error',
        description: 'Failed to load association members.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };
  
  const removeMember = async (userId: string) => {
    if (!associationId) return;
    
    try {
      const { error } = await supabase
        .from('association_members')
        .delete()
        .eq('user_id', userId)
        .eq('association_id', associationId);
      
      if (error) throw error;
      
      // Create notification for the user
      await supabase
        .from('notifications')
        .insert({
          user_id: userId,
          title: 'Association Membership',
          message: `You have been removed from an association.`,
          read: false
        });
      
      toast({
        title: 'Member Removed',
        description: 'The member has been removed from the association.',
      });
      
      // Refresh member list
      fetchMembers();
      
    } catch (error) {
      console.error('Error removing member:', error);
      toast({
        title: 'Error',
        description: 'Failed to remove member from the association.',
        variant: 'destructive',
      });
    }
  };
  
  const sendInvitation = async (memberId: string) => {
    if (!associationId) return;
    
    try {
      // Generate a random code
      const code = Math.random().toString(36).substring(2, 10).toUpperCase();
      
      // Insert invitation to the convention_invitations table
      const { error } = await supabase
        .from('convention_invitations')
        .insert({
          code,
          convention_id: associationId,
          created_by: profile?.id,
          expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days
          uses_remaining: 1,
        });
      
      if (error) throw error;
      
      // Create notification for the user
      await supabase
        .from('notifications')
        .insert({
          user_id: memberId,
          title: 'Convention Invitation',
          message: `You have been invited to join a convention with code: ${code}`,
          read: false
        });
      
      toast({
        title: 'Invitation Sent',
        description: 'An invitation has been sent to the user.',
      });
      
    } catch (error) {
      console.error('Error sending invitation:', error);
      toast({
        title: 'Error',
        description: 'Failed to send invitation.',
        variant: 'destructive',
      });
    }
  };
  
  // Filter members based on search query
  const filteredMembers = members.filter(member => {
    const query = searchQuery.toLowerCase();
    return (
      member.name?.toLowerCase().includes(query) ||
      member.email?.toLowerCase().includes(query)
    );
  });
  
  if (!associationId) {
    return (
      <div className="container mx-auto py-6">
        <Card>
          <CardHeader>
            <CardTitle>No Association Selected</CardTitle>
            <CardDescription>Please select an association to view its members.</CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-6">
      <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-6">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Association Members</h1>
          <p className="text-muted-foreground">
            {associationIdFromQuery 
              ? "Managing members for this association"
              : `Manage members of ${currentAssociation?.name || 'your association'}`}
          </p>
        </div>
        {isAdmin && (
          <AddUserToAssociation 
            associationId={associationId}
            onUserAdded={fetchMembers}
          />
        )}
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Members</CardTitle>
          <CardDescription>
            Users who have access to this association.
          </CardDescription>
          <div className="relative mt-4">
            <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search members by name or email"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="space-y-2">
              {[1, 2, 3].map((i) => (
                <div key={i} className="flex justify-between p-2 border-b animate-pulse">
                  <div className="space-y-1">
                    <div className="h-4 w-40 bg-muted rounded"></div>
                    <div className="h-3 w-60 bg-muted rounded"></div>
                  </div>
                  <div className="h-8 w-32 bg-muted rounded"></div>
                </div>
              ))}
            </div>
          ) : filteredMembers.length === 0 ? (
            <p className="text-center py-4 text-muted-foreground">No members found</p>
          ) : (
            <div className="space-y-4">
              {filteredMembers.map((member) => (
                <div
                  key={member.id}
                  className="flex flex-col sm:flex-row justify-between items-start sm:items-center p-3 border-b last:border-0 gap-2"
                >
                  <div>
                    <p className="font-medium">{member.name}</p>
                    <p className="text-sm text-muted-foreground">{member.email}</p>
                  </div>
                  {isAdmin && (
                    <div className="flex items-center gap-2 flex-wrap sm:flex-nowrap">
                      <UserRoleManager
                        userId={member.id}
                        currentRole={member.role as any}
                        onRoleUpdated={fetchMembers}
                      />
                      
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => sendInvitation(member.id)}
                        title="Send convention invitation"
                      >
                        <Mail className="h-4 w-4 mr-1" />
                        Invite
                      </Button>
                      
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button
                            variant="outline"
                            size="sm"
                            className="text-destructive hover:text-destructive"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>Remove Member</AlertDialogTitle>
                            <AlertDialogDescription>
                              Are you sure you want to remove this member from the association? This action cannot be undone.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                            <AlertDialogAction
                              onClick={() => removeMember(member.id)}
                              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                            >
                              Remove
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default AssociationMembers;
