# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Or your preferred/required Node.js version
          cache: 'npm'
      - name: Clean install workaround for Rollup bug
        run: rm -rf node_modules package-lock.json
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build # Assuming your build script generates output in 'dist'
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      - name: Handle 404 page
        run: |
          # Remove any existing 404.html if it's a directory (causes the EEXIST error)
          if [ -d "./dist/404.html" ]; then
            echo "Found 404.html as a directory, removing it"
            rm -rf "./dist/404.html"
          fi
          
          # Now create the 404.html file properly (either by copying from public or creating new)
          echo "Creating 404.html file in dist folder"
          cat ./public/404.html > ./dist/404.html
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist folder
          path: './dist' # Ensure this matches your build output directory
      - name: Deploy check # Verify the contents of the distribution folder
        run: |
          echo "Checking build output directory contents:"
          ls -la ./dist
          echo "Verifying 404.html exists:"
          [ -f "./dist/404.html" ] && echo "✅ 404.html exists" || echo "❌ 404.html is missing"

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4